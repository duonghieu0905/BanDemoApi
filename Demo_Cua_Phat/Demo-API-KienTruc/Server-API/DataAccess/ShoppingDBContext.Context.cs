//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShoppingDBContext : DbContext
    {
        public ShoppingDBContext()
            : base("name=ShoppingDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accessory> Accessories { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Producer> Producers { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
    
        public virtual ObjectResult<GetRevenueForMonth_Result> GetRevenueForMonth(Nullable<int> month, Nullable<int> year, Nullable<int> startDay, Nullable<int> endday)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var startDayParameter = startDay.HasValue ?
                new ObjectParameter("StartDay", startDay) :
                new ObjectParameter("StartDay", typeof(int));
    
            var enddayParameter = endday.HasValue ?
                new ObjectParameter("Endday", endday) :
                new ObjectParameter("Endday", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRevenueForMonth_Result>("GetRevenueForMonth", monthParameter, yearParameter, startDayParameter, enddayParameter);
        }
    
        public virtual ObjectResult<GetRevenueForMonthAndYear_Result> GetRevenueForMonthAndYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRevenueForMonthAndYear_Result>("GetRevenueForMonthAndYear", yearParameter);
        }
    
        public virtual ObjectResult<GetStatisticByDay_Result> GetStatisticByDay(Nullable<int> year, Nullable<int> month, Nullable<int> day)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticByDay_Result>("GetStatisticByDay", yearParameter, monthParameter, dayParameter);
        }
    
        public virtual ObjectResult<GetStatisticByMonth_Result> GetStatisticByMonth(Nullable<int> year, Nullable<int> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticByMonth_Result>("GetStatisticByMonth", yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<GetStatisticByYear_Result> GetStatisticByYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticByYear_Result>("GetStatisticByYear", yearParameter);
        }
    }
}
